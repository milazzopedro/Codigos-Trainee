
from src.flightlib import *
from src.perflib import *
from scipy.optimize import fsolve
from scipy.interpolate import interp1d
import numpy as np
import matplotlib.pyplot as plt

# parametros
v_array = np.arange(0.01, 25, 0.1)
h_solutions_I = []

# RC = 0
for v in v_array:
    def func_h(h):
        return RC(v, h, W)
    try:
        h_sol = fsolve(func_h, 500.0)[0]
        h_solutions_I.append(h_sol)
    except:
        h_solutions_I.append(np.nan)

h_solutions_I = np.array(h_solutions_I)

# range de carga paga
peso_vazio = 2.5 #hipotese, muda-se uma vez que estiver definido
carga_range = np.arange(peso_vazio, MTOW + 1e-6, 1.0) # +1e-6 implica que o valor sera incluido mesmo que igual a MTOW-peso_vazio

plt.figure(figsize=(12, 7))
colors = plt.cm.viridis(np.linspace(0, 1, len(carga_range)))

# serve apenas para botar a legenda em ordem na hora de plotar
legend_elements = []

for i, M in enumerate(carga_range):
    # curva de estol para cada carga paga
    h_stall = np.linspace(0, 6000, 1000)
    v_stall = V_stall(h_stall, M)

    RC_valida = ~np.isnan(h_solutions_I)
    STALL_valida = ~np.isnan(v_stall)

    RC_interpolada = interp1d(v_array[RC_valida], h_solutions_I[RC_valida], bounds_error=False, fill_value=np.nan)
    STALL_interpolada = interp1d(v_stall[STALL_valida], h_stall[STALL_valida], bounds_error=False, fill_value=np.nan)

    v_interpolada_range = np.linspace(
        max(v_array[RC_valida].min(), v_stall[STALL_valida].min()),
        min(v_array[RC_valida].max(), v_stall[STALL_valida].max()),
        1000
    )

    h_RC_interpolada = RC_interpolada(v_interpolada_range)
    h_STALL_interpolada = STALL_interpolada(v_interpolada_range)

    # intersecao entre as curvas marca onde V_stall >= V(RC=0)
    intersecao = (~np.isnan(h_RC_interpolada)) & (~np.isnan(h_STALL_interpolada)) & (h_RC_interpolada <= h_STALL_interpolada)
    if np.any(intersecao):
        inter_intersecao = np.where(intersecao)[0][0]
        v_intersecao_real = v_interpolada_range[inter_intersecao]
    else:
        continue 

    # envelope final para cada carga paga
    v_estol_corte = v_stall[(v_stall <= v_intersecao_real) & (~np.isnan(v_stall))]
    h_estol_corte = h_stall[(v_stall <= v_intersecao_real) & (~np.isnan(v_stall))]

    v_RC_corte = v_array[(v_array >= v_intersecao_real) & (~np.isnan(h_solutions_I))]
    h_RC_corte = h_solutions_I[(v_array >= v_intersecao_real) & (~np.isnan(h_solutions_I))]

    v_envelope_final = np.concatenate([v_estol_corte, v_RC_corte])
    h_envelope_final = np.concatenate([h_estol_corte, h_RC_corte])

    ordem = np.argsort(v_envelope_final)
    v_envelope_final = v_envelope_final[ordem]
    h_envelope_final = h_envelope_final[ordem]

    linha, = plt.plot(v_envelope_final, h_envelope_final, color=colors[i], label=f'{M-peso_vazio:.1f} kg')
    legend_elements.append(linha)

    # viadagem pra marcar os valores esperados
    if np.isclose(M, peso_vazio):
        ymin, ymax = 850, 1300
        v_destaque = []
        h_destaque = []

        for v, h in zip(v_envelope_final, h_envelope_final):
            if ymin <= h <= ymax:
                v_destaque.append(v)
                h_destaque.append(h)

        v_destaque = np.array(v_destaque)
        h_destaque = np.array(h_destaque)

        if len(v_destaque) > 1:
            h_base = np.full_like(v_destaque, ymin)
            highlight_color = plt.cm.viridis(0.2)
            highlight = plt.fill_between(v_destaque, h_base, h_destaque,
                                          color=highlight_color, alpha=0.3,
                                          edgecolor='none')


plt.xlabel('Velocidade [m/s]')
plt.ylabel('Altitude [m]')
plt.title('Envelope Operacional para Diferentes Cargas Pagas')
plt.grid(True)
legend_elements.append(plt.Line2D([0], [0], color=highlight_color, lw=6, alpha=0.3, label='Regi√£o Esperada (850-1300 m)'))
plt.legend(handles=legend_elements, title="Carga Paga")
plt.xlim(0, 20)
plt.ylim(0, 7000)
plt.tight_layout()
plt.show()
